generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model University {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  description       String?
  universityCourses UniversityCourse[]
}

enum CourseModality {
  GRADUACAO
  POS
  TECNICO
}

model Course {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  modality          CourseModality     @default(GRADUACAO)
  description       String?
  targetAudience    String?
  jobMarket         String?
  universityCourses UniversityCourse[]
  courseCurriculums CourseCurriculum[]
}

model CourseCurriculum {
  id          String  @id @default(uuid())
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id])
  semester    Int // exemplo: 1, 2, 3
  title       String? // opcional: nome do semestre ("1ยบ Semestre")
  description String? // texto explicando o semestre todo

  subjects Subject[]
}

model Subject {
  id           String           @id @default(uuid())
  curriculumId String
  curriculum   CourseCurriculum @relation(fields: [curriculumId], references: [id])
  name         String // "Banco de Dados", "Desenvolvimento Mobile"
  workload     Int? // em horas
  description  String?
}

model UniversityCourse {
  id           String     @id @default(uuid())
  courseId     String
  course       Course     @relation(fields: [courseId], references: [id])
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  externalId   String
  externalName String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([courseId, universityId])
}

model City {
  id        String   @id @default(uuid())
  city      String
  state     String
  lat       Float
  lon       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([city, state])
}
